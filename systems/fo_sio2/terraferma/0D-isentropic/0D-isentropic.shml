<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">medium</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Driver program to calculate 0-D isentropic upwelling TF models</string_value>
  </description>
  <simulations>
    <simulation name="Isentropic">
      <input_file>
        <string_value type="filename" lines="1">0D-isentropic.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="Pmin">
          <values>
            <string_value lines="1">1.</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::IsentropicDecompression/coefficient::Pmin/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Pmin))</string_value>
            <single_build/>
          </update>
          <comment>minimum pressure in bars</comment>
        </parameter>
        <parameter name="Pmax">
          <values>
            <string_value lines="1">11000.</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::IsentropicDecompression/coefficient::Pmax/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Pmax))</string_value>
            <single_build/>
          </update>
          <comment>minimum pressure in bars</comment>
        </parameter>
        <parameter name="T0">
          <values>
            <string_value lines="1">1953.15</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::IsentropicDecompression/field::Temperature/type::Function/rank::Scalar/initial_condition::WholeMesh/constant",float(T0))</string_value>
            <single_build/>
          </update>
          <comment>Maximum temperature in K</comment>
        </parameter>
        <parameter name="V0">
          <values>
            <string_value lines="1">10.</string_value>
          </values>
          <comment>Initial volume in J/bar = 10 cm^3</comment>
        </parameter>
        <parameter name="W0">
          <values>
            <string_value lines="1">0.1</string_value>
          </values>
          <comment>upwelling rate in cm/yr</comment>
        </parameter>
        <parameter name="Phi0">
          <values>
            <string_value lines="1">[ 0.0,0.6,0.4,0.0]</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
Phi0 = eval(Phi0)
print(Phi0)
libspud.set_option("/system::IsentropicDecompression/field::Phi/type::Function/rank::Vector/initial_condition::WholeMesh/constant::arbitrary",list(Phi0))


# and let's calculate initial concentrations, masses and total entropy
import numpy as np
from scipy.optimize import minimize, LinearConstraint, Bounds
import py_fo_sio2_poly_linear_rxns as pfs
rxn = pfs.fo_sio2_poly_linear_rxns()
rxn.report()

iLq = 0
T0 = float(T0)
P  = float(Pmax)
V0 = float(V0)
print('T0={}, P={}, V0={}'.format(T0,P,V0))


# initialize liquid composition to liquid CPX
C0 = rxn.zero_C()
C0[iLq] = [0.29925828305377, 0.7007417169462299]
for i in range(1,len(C0)):
  C0[i] = [1.]

# Calculate and set general Reaction rate
s_per_year = 3600.*24*365.25
r0 = 1.e-8 # kg/m^2/s
ell = 0.1 # m
W0 = float(W0)/s_per_year
rho0 = np.array(rxn.rho(T0,P,C0)).dot(np.array(Phi0))
print(rho0)
h = P*1000./rho0/9.81
print('h = {} m'.format(h))

# this is the correct scaling between kg/m^3 and g/(J/bar)
Gamma0 = r0/ell/100. * h/W0
rxn.set_parameter('r0_melt',Gamma0)
rxn.set_parameter('r0_xtal',Gamma0)
rxn.list_parameters()

libspud.set_option("/system::IsentropicDecompression/coefficient::Gamma0/type::Constant/rank::Scalar/value::WholeMesh/constant",Gamma0)

# solve constrained minimization problem for initial concentration
# should replace with a nice function to import methinks
def regularizec(c, eps=1.e-6):
    """ replaces zeros in concentrations with a small number epsilon """
    c = np.maximum(c, eps*np.ones(len(c)))
    c /= np.sum(c)
    return c
    
def func(cLq,T,P,C,Phi):
    """ function to return || MdC/dT|| """
    C[iLq] = regularizec(cLq)
    res = np.array(rxn.Gamma_ik(T,P,C,Phi)[iLq]) - np.array(C[iLq])*rxn.Gamma_i(T,P,C,Phi)[iLq]
    return np.linalg.norm(res)

#constraints and bounds
lc = LinearConstraint(np.ones(2),1.,1.)
bnds = Bounds(np.zeros(2),np.ones(2))

c0 = C0[iLq].copy()
sol = minimize(func, c0, args=(T0, P, C0, Phi0),bounds=bnds,constraints=lc)
print('{}'.format(sol.message))

cf = sol.x
print('cf = {}'.format(cf))
print('residual = {}, sum(cf)= {}'.format(func(cf,T0,P,C0,Phi0),np.sum(cf)))
C0[iLq]=cf.copy()
print(C0)

# Calculate initial Masses, and total Entropy
# get densities in wierd ENKI units (g/(J/bar))
rho = np.array(rxn.rho(T0,P,C0))
print('Phase Densities (g/(J/bar)= g/(10 cm^3)):\n{}'.format(rho))
M0 = rho*Phi0*V0
print('Mass of phases (g) =\n{}'.format(M0))

# Total entropy
s = np.array(rxn.s(T0,P,C0))        
S0 = M0.dot(s)
print('Total Entropy S0 = {}'.format(S0))

# and update everybody
libspud.set_option("/system::IsentropicDecompression/coefficient::S0/type::Constant/rank::Scalar/value::WholeMesh/constant",S0)
libspud.set_option("/system::IsentropicDecompression/field::Mass/type::Function/rank::Vector/initial_condition::WholeMesh/constant::arbitrary",list(M0))
libspud.set_option("/system::IsentropicDecompression/field::cLq/type::Function/rank::Vector/initial_condition::WholeMesh/constant::arbitrary",list(cf))</string_value>
            <single_build/>
          </update>
          <comment>Maximum temperature in K</comment>
        </parameter>
        <parameter name="dt">
          <values>
            <string_value lines="1">0.001</string_value>
            <comment>time step</comment>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/timestepping/timestep/coefficient::Timestep/type::Constant/rank::Scalar/value::WholeMesh/constant",float(dt))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
    </simulation>
  </simulations>
</harness_options>
