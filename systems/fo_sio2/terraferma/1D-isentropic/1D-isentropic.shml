<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">medium</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Driver program to calculate 0-D isentropic upwelling TF models</string_value>
  </description>
  <simulations>
    <simulation name="Isentropic">
      <input_file>
        <string_value type="filename" lines="1">1D-isentropic.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="Pmin">
          <values>
            <string_value lines="1">1.</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::IsentropicDecompression/coefficient::Pmin/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Pmin))</string_value>
            <single_build/>
          </update>
          <comment>minimum pressure in bars</comment>
        </parameter>
        <parameter name="Pmax">
          <values>
            <string_value lines="1">11000.</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::IsentropicDecompression/coefficient::Pmax/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Pmax))</string_value>
            <single_build/>
          </update>
          <comment>minimum pressure in bars</comment>
        </parameter>
        <parameter name="T0">
          <values>
            <string_value lines="1">1953.15</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::IsentropicDecompression/field::Temperature/type::Function/rank::Scalar/initial_condition::WholeMesh/constant",float(T0))</string_value>
            <single_build/>
          </update>
          <comment>Maximum temperature in K</comment>
        </parameter>
        <parameter name="Da">
          <values>
            <string_value lines="1">100. 1000. 2000.</string_value>
          </values>
          <comment>Maximum temperature in K</comment>
        </parameter>
        <parameter name="F0">
          <values>
            <string_value lines="1">[ 0.0,0.6,0.4,0.0]</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
import numpy as np

F0 = np.array(eval(F0))
print(F0)

libspud.set_option("/system::IsentropicDecompression/field::MassFraction/type::Function/rank::Vector/initial_condition::WholeMesh/constant::arbitrary",list(F0))

# Set up Da and initial concentrations
import py_fo_sio2_poly_linear_rxns as pfs
rxn = pfs.fo_sio2_poly_linear_rxns()
rxn.report()

# Set the Da number in the Rxn rate

rxn.set_parameter('Stot',float(Da))
rxn.list_parameters()

# and let's calculate initial concentrations, masses, mean density and total entropy
from scipy.optimize import minimize, LinearConstraint, Bounds

iLq = 0
T0 = float(T0)
P  = float(Pmax)
print('T0={}, P={}'.format(T0,P))


# initialize liquid composition to liquid CPX
C0 = rxn.zero_C()
C0[iLq] = [0.29925828305377, 0.7007417169462299]
for i in range(1,len(C0)):
  C0[i] = [1.]

libspud.set_option("/system::IsentropicDecompression/coefficient::Da/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Da))

# solve constrained minimization problem for initial concentration
# should replace with a nice function to import methinks
def regularizec(c, eps=1.e-6):
    """ replaces zeros in concentrations with a small number epsilon """
    c = np.maximum(c, eps*np.ones(len(c)))
    c /= np.sum(c)
    return c
    
def func(cLq,T,P,C,Phi):
    """ function to return || MdC/dT|| """
    C[iLq] = regularizec(cLq)
    res = np.array(rxn.Gamma_ik(T,P,C,Phi)[iLq]) - np.array(C[iLq])*rxn.Gamma_i(T,P,C,Phi)[iLq]
    return np.linalg.norm(res)

#constraints and bounds
lc = LinearConstraint(np.ones(2),1.,1.)
bnds = Bounds(np.zeros(2),np.ones(2))

c0 = C0[iLq].copy()
sol = minimize(func, c0, args=(T0, P, C0, F0),bounds=bnds,constraints=lc)
print('{}'.format(sol.message))

cf = sol.x
print('cf = {}'.format(cf))
print('residual = {}, sum(cf)= {}'.format(func(cf,T0,P,C0,F0),np.sum(cf)))
C0[iLq]=cf.copy()
print(C0)


# Calculate initial Masses, and total Entropy
# get densities in wierd ENKI units (g/(J/bar))
rho = np.array(rxn.rho(T0,P,C0))
print('Phase Densities (g/(J/bar)= g/(10 cm^3)):\n{}'.format(rho))
rhobar0 = 1./F0.dot(1./rho)
print('mean density =\n{}'.format(rhobar0))

libspud.set_option("/system::IsentropicDecompression/coefficient::rhoBar0/type::Constant/rank::Scalar/value::WholeMesh/constant",rhobar0)

# Total entropy
s = np.array(rxn.s(T0,P,C0))        
S0 = F0.dot(s)
print('Mean Entropy S0 = {}'.format(S0))

# and update everybody
libspud.set_option("/system::IsentropicDecompression/coefficient::S0/type::Constant/rank::Scalar/value::WholeMesh/constant",S0)

libspud.set_option("/system::IsentropicDecompression/field::cLq/type::Function/rank::Vector/initial_condition::WholeMesh/constant::arbitrary",list(cf))</string_value>
            <single_build/>
          </update>
          <comment>Maximum temperature in K</comment>
        </parameter>
        <parameter name="dz">
          <values>
            <string_value lines="1">0.001</string_value>
            <comment>time step</comment>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/timestepping/timestep/coefficient::Timestep/type::Constant/rank::Scalar/value::WholeMesh/constant",float(dz))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <variables>
        <variable name="S_error_max">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser
import numpy

stat = parser("ode-isentropic.stat")
S_error_max = 1.
S_error_max = numpy.abs(stat["IsentropicDecompression"]["S_error"]["functional_value"]).max()</string_value>
        </variable>
        <variable name="finish_time">
          <string_value type="code" language="python3" lines="20">from buckettools.statfile import parser

stat = parser("ode-isentropic.stat")

finish_time = stat["ElapsedTime"]["value"][-1]</string_value>
        </variable>
        <variable name="err_file">
          <string_value type="code" language="python3" lines="20">import os
err = open("terraferma.err-0", 'r')

print(err.read())
err.seek(0)

linecount = -1
err_file = []
for line in err.readlines():
  if not line.startswith("WARNING:") and not line.startswith(os.linesep):
    if line.startswith("*** WARNING:"):
      linecount = 0
    elif linecount &gt;= 0:
      if line.startswith("-----------"):
        linecount += 1
      if linecount == 2:
        linecount = -1
    else:
      err_file.append(line)

err.close()</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="S_error_max">
      <string_value type="code" language="python3" lines="20">import numpy
# extract Da numbers
Da = S_error_max.parameters['Da']
# extract errors for each Da number
max_errors = numpy.array(S_error_max[{'Da':Da}])

print('Maximum Errors')
for i,da in enumerate(Da):
  print('Da = {}:\t {}'.format(da,max_errors[i]))

# pass if all max errors &lt;= 1.e-6
test = 1.e-6
assert(numpy.all(max_errors &lt;= test))
print('all errors &lt;= {}'.format(test))</string_value>
    </test>
    <test name="finish_time">
      <string_value type="code" language="python3" lines="20">import itertools

no_errors = True

params = list(finish_time.parameters.keys())

for values in itertools.product(*finish_time.parameters.values()):
  label = ", ".join(["{} = {}".format(params[i], v) for i,v in enumerate(values) if len(finish_time.parameters[params[i]])&gt;1])
  key = {params[i]:v for i,v in enumerate(values)}
  if (abs(finish_time[key]-1.0) &gt; 1.e-6):
    print("ERROR: case {} did not finish!".format(label))
    no_errors = False

assert(no_errors)</string_value>
    </test>
    <test name="err_file">
      <string_value type="code" language="python3" lines="20">import sys
import itertools
no_errors = True

params = list(err_file.parameters.keys())

for values in itertools.product(*err_file.parameters.values()):
  label = ", ".join(["{} = {}".format(params[i], v) for i,v in enumerate(values) if len(err_file.parameters[params[i]])&gt;1])
  key = {params[i]:v for i,v in enumerate(values)}
  if len(err_file[key]) &gt; 0:
    print("ERROR: unexpected output in terraferma.err-0 for case {}!".format(label))
    print(err_file[key])
    for line in err_file[key]:
      print(line)
      sys.stdout.write(line)
    no_errors = False

assert(no_errors)</string_value>
    </test>
  </tests>
</harness_options>
