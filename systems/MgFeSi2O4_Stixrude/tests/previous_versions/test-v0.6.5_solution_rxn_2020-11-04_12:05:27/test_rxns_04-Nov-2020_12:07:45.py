import numpy as np
from numpy import array
from thermocodegen.testing import is_float_list, allclose_float_list
import py_MgFeSiO4_stixrude as db
import pytest
class TestMgFeSiO4_stixrude:
    phase = db.MgFeSiO4_stixrude()

    def test_name(self):
        test = self.phase.name()
        answer = 'MgFeSiO4_stixrude'
        assert(test == answer)

    def test_A(self):
        test = self.phase.A(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[-8879.798598758178, 2390.1549975329544, -8888.431008098647, 8584.81902733678]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_C_to_X(self):
        test = self.phase.C_to_X([[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]],)
        answer =[[0.9, 0.09999999999999999], [0.9, 0.09999999999999999], [0.9, 0.09999999999999999]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_Cp(self):
        test = self.phase.Cp(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[1.2225993031652282, 1.239225892187207, 1.224492180670981]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_Gamma_i(self):
        test = self.phase.Gamma_i(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[0.046721762967206454, 0.08126158780797288, -0.12798335077517933]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_Gamma_ik(self):
        test = self.phase.Gamma_ik(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[0.06392952692338662, -0.01720776395618016], [6.214846420304898e-05, 0.08119943934376983], [-0.06399167538758967, -0.06399167538758967]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_M(self):
        test = self.phase.M()
        answer =[[140.69332, 203.77312], [140.69332, 203.77312], [140.69332, 203.77312]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_Mu(self):
        test = self.phase.Mu(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[[-1987348.5768330542, -1394215.519369004], [-1978468.778234296, -1396605.674366537], [-1969580.3472261974, -1405190.4933938738]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_X_to_C(self):
        test = self.phase.X_to_C([[0.9, 0.09999999999999999], [0.9, 0.09999999999999999], [0.9, 0.09999999999999999]],)
        answer =[[0.8613775369639085, 0.13862246303609146], [0.8613775369639085, 0.13862246303609146], [0.8613775369639085, 0.13862246303609146]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_alpha(self):
        test = self.phase.alpha(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[2.6335852373441768e-05, 2.8498719564962452e-05, 2.4470906476643816e-05]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dA_dC(self):
        test = self.phase.dA_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[[[3123.0409138064733, -19406.070497187313], [-2937.0597462865317, 18250.413639768107], [0.0, 0.0]], [[-28107.368224257923, 174654.63447468376], [26433.53771657839, -164253.72275791055], [0.0, 0.0]], [[0.0, 0.0], [2937.0597462865317, -18250.413639768107], [-3091.6957732131755, 19211.29686953209]], [[0.0, 0.0], [-26433.53771657839, 164253.72275791055], [27825.261958918727, -172901.67182578973]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dA_dP(self):
        test = self.phase.dA_dP(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[0.2304066333865653, 0.274735509724513, 0.10321401639926897, 0.06626557320550841]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dA_dT(self):
        test = self.phase.dA_dT(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[-5.08125375441449, -10.692627417360313, -6.661433473344175, -2.0416951583650302]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dAj_dCik(self):
        test = self.phase.dAj_dCik(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], 0, 1, 0)
        answer = -2937.0597462865317
        assert(np.isclose(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_i_dC(self):
        test = self.phase.dGamma_i_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[[0.1798730238858773, -1.1177018420220088], [-0.16916135026042167, 1.0511412367479998], [-0.0, -0.0]], [[-0.1798730238858773, 1.1177018420220088], [0.12687101269531553, -0.7883559275609955], [0.04451692140859892, -0.27662094062036086]], [[0.0, 0.0], [0.04229033756510613, -0.26278530918700427], [-0.04451692140859892, 0.27662094062036086]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_i_dP(self):
        test = self.phase.dGamma_i_dP(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[-3.636737689374292e-06, 2.150572622254254e-06, 1.486165067120038e-06]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_i_dPhi(self):
        test = self.phase.dGamma_i_dPhi(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[-0.052144739261152, 0.1937258391617776, 0.0], [0.052144739261152, -0.1937258391617776, 0.3878283356823616], [0.0, 0.0, -0.3878283356823616]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_i_dT(self):
        test = self.phase.dGamma_i_dT(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[0.00011841303170728006, -9.210457026650968e-06, -0.0001092025746806291]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_ik_dC(self):
        test = self.phase.dGamma_ik_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33], 1)
        answer =[[-0.04229033756510613, 0.26278530918700427], [0.16916135026042167, -1.0511412367479998]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_ik_dP(self):
        test = self.phase.dGamma_ik_dP(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[-1.6587974275084603e-06, -1.977940261865832e-06], [9.157148939484413e-07, 1.234857728305813e-06], [7.43082533560019e-07, 7.43082533560019e-07]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_ik_dPhi(self):
        test = self.phase.dGamma_ik_dPhi(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33], 1)
        answer =[[0.0, -0.1937258391617776, 0.1939141678411808], [0.052144739261152, 0.0, 0.1939141678411808]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_ik_dT(self):
        test = self.phase.dGamma_ik_dT(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[4.321843581807238e-05, 7.519459588920769e-05], [1.138285152224217e-05, -2.059330854889314e-05], [-5.460128734031455e-05, -5.460128734031455e-05]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dMu_dC(self):
        test = self.phase.dMu_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[[[3123.0409138064733, -19406.070497187313], [-28107.368224257923, 174654.63447468376]], [[2937.0597462865317, -18250.413639768107], [-26433.53771657839, 164253.72275791055]], [[3091.6957732131755, -19211.29686953209], [-27825.261958918727, 172901.67182578973]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_ds_dC(self):
        test = self.phase.ds_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[[2.553184110534025, 2.1696163656151692], [2.517068275678791, 2.117143594681643], [2.469721039328626, 2.107123746341127]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_get_parameter(self):
        test = self.phase.get_parameter('R',)
        answer = None
        assert(test == answer)

    def test_list_parameters(self):
        test = self.phase.list_parameters()
        answer = None
        assert(test == answer)

    def test_nu(self):
        test = self.phase.nu()
        answer =[[[-1.0, 0.0], [1.0, 0.0], [0.0, 0.0]], [[0.0, -1.0], [0.0, 1.0], [0.0, 0.0]], [[0.0, 0.0], [-1.0, 0.0], [1.0, 0.0]], [[0.0, 0.0], [0.0, -1.0], [0.0, 1.0]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_nu_m(self):
        test = self.phase.nu_m()
        answer =[[[-1.0, 0.0], [1.0, 0.0], [0.0, 0.0]], [[0.0, -1.0], [0.0, 1.0], [0.0, 0.0]], [[0.0, 0.0], [-1.0, 0.0], [1.0, 0.0]], [[0.0, 0.0], [0.0, -1.0], [0.0, 1.0]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_report(self):
        test = self.phase.report()
        answer = None
        assert(test == answer)

    def test_rho(self):
        test = self.phase.rho(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[34.73259737168928, 36.772999348357004, 37.7118397306898]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_s(self):
        test = self.phase.s(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[2.500009603648644, 2.4616263822481206, 2.419453617739961]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_set_parameter(self):
        test = self.phase.set_parameter('R', 8.31442)
        answer = None
        assert(test == answer)

    def test_zero_C(self):
        test = self.phase.zero_C()
        answer =[[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

