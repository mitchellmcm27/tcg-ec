import numpy as np
from numpy import array
from thermocodegen.testing import is_float_list, allclose_float_list
import py_MgFeSiO4_stixrude as db
import pytest
class TestMgFeSiO4_stixrude:
    phase = db.MgFeSiO4_stixrude()

    def test_name(self):
        test = self.phase.name()
        answer = 'MgFeSiO4_stixrude'
        assert(test == answer)

    def test_A(self):
        test = self.phase.A(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[-8879.798598759342, 2390.154997532256, -8888.431008097949, 8584.819027337478]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_C_to_X(self):
        test = self.phase.C_to_X([[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]],)
        answer =[[0.9, 0.09999999999999999], [0.9, 0.09999999999999999], [0.9, 0.09999999999999999]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_Cp(self):
        test = self.phase.Cp(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[1.2225993031652265, 1.2392258921872066, 1.2244921806709808]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_Gamma_i(self):
        test = self.phase.Gamma_i(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[0.04672176296721987, 0.0812615878079494, -0.12798335077516926]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_Gamma_ik(self):
        test = self.phase.Gamma_ik(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[0.063929526923395, -0.017207763956175133], [6.214846418962916e-05, 0.08119943934375976], [-0.06399167538758463, -0.06399167538758463]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_M(self):
        test = self.phase.M()
        answer =[[140.69332, 203.77312], [140.69332, 203.77312], [140.69332, 203.77312]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_Mu(self):
        test = self.phase.Mu(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[[-1987348.5768330551, -1394215.519369004], [-1978468.7782342958, -1396605.6743665363], [-1969580.3472261978, -1405190.4933938738]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_X_to_C(self):
        test = self.phase.X_to_C([[0.9, 0.09999999999999999], [0.9, 0.09999999999999999], [0.9, 0.09999999999999999]],)
        answer =[[0.8613775369639085, 0.13862246303609146], [0.8613775369639085, 0.13862246303609146], [0.8613775369639085, 0.13862246303609146]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_alpha(self):
        test = self.phase.alpha(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[2.6335852373441714e-05, 2.8498719564962435e-05, 2.4470906476643826e-05]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_beta(self):
        test = self.phase.beta(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[6.996198347599865e-07, 5.686698612920311e-07, 5.154274428163419e-07]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dA_dC(self):
        test = self.phase.dA_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[[[3123.0409138064733, -19406.070497187313], [-2937.059746286531, 18250.413639768107], [0.0, 0.0]], [[-28107.368224257923, 174654.63447468376], [26433.53771657844, -164253.72275791084], [0.0, 0.0]], [[0.0, 0.0], [2937.059746286531, -18250.413639768107], [-3091.6957732132246, 19211.296869532394]], [[0.0, 0.0], [-26433.53771657844, 164253.72275791084], [27825.26195891873, -172901.67182578973]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dA_dP(self):
        test = self.phase.dA_dP(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[0.2304066333865653, 0.274735509724513, 0.10321401639926853, 0.06626557320550663]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dA_dT(self):
        test = self.phase.dA_dT(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[-5.081253754414547, -10.69262741736037, -6.661433473344118, -2.041695158364803]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dAj_dCik(self):
        test = self.phase.dAj_dCik(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], 0, 1, 0)
        answer = -2937.059746286531
        assert(np.isclose(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_i_dC(self):
        test = self.phase.dGamma_i_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[[0.1798730238858773, -1.1177018420220088], [-0.16916135026042206, 1.051141236748002], [-0.0, -0.0]], [[-0.1798730238858773, 1.1177018420220088], [0.12687101269531592, -0.7883559275609977], [0.04451692140859963, -0.27662094062036524]], [[0.0, 0.0], [0.042290337565106126, -0.26278530918700427], [-0.04451692140859963, 0.27662094062036524]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_i_dP(self):
        test = self.phase.dGamma_i_dP(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[-3.636737689374292e-06, 2.1505726222542604e-06, 1.4861650671200316e-06]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_i_dPhi(self):
        test = self.phase.dGamma_i_dPhi(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[-0.05214473926113676, 0.19372583916180297, 0.0], [0.05214473926113676, -0.19372583916180297, 0.38782833568233105], [0.0, 0.0, -0.38782833568233105]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_i_dT(self):
        test = self.phase.dGamma_i_dT(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[0.00011841303170728227, -9.210457026655075e-06, -0.0001092025746806272]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_ik_dC(self):
        test = self.phase.dGamma_ik_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33], 1)
        answer =[[-0.042290337565106126, 0.26278530918700427], [0.16916135026042206, -1.051141236748002]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_ik_dP(self):
        test = self.phase.dGamma_ik_dP(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[-1.6587974275084603e-06, -1.977940261865832e-06], [9.157148939484445e-07, 1.2348577283058162e-06], [7.430825335600158e-07, 7.430825335600158e-07]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_ik_dPhi(self):
        test = self.phase.dGamma_ik_dPhi(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33], 1)
        answer =[[0.0, -0.19372583916180297, 0.19391416784116552], [0.05214473926113676, 0.0, 0.19391416784116552]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dGamma_ik_dT(self):
        test = self.phase.dGamma_ik_dT(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]], [0.33, 0.33, 0.33])
        answer =[[4.321843581807366e-05, 7.519459588920862e-05], [1.138285152223994e-05, -2.0593308548895022e-05], [-5.46012873403136e-05, -5.46012873403136e-05]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_dMu_dC(self):
        test = self.phase.dMu_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[[[3123.0409138064733, -19406.070497187313], [-28107.368224257923, 174654.63447468376]], [[2937.059746286531, -18250.413639768107], [-26433.53771657844, 164253.72275791084]], [[3091.6957732132246, -19211.296869532394], [-27825.26195891873, 172901.67182578973]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_ds_dC(self):
        test = self.phase.ds_dC(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[[2.5531841105340263, 2.16961636561517], [2.517068275678791, 2.1171435946816426], [2.4697210393286264, 2.107123746341128]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_get_parameter(self):
        test = self.phase.get_parameter('R',)
        answer = None
        assert(test == answer)

    def test_list_parameters(self):
        test = self.phase.list_parameters()
        answer = None
        assert(test == answer)

    def test_nu(self):
        test = self.phase.nu()
        answer =[[[-1.0, 0.0], [1.0, 0.0], [0.0, 0.0]], [[0.0, -1.0], [0.0, 1.0], [0.0, 0.0]], [[0.0, 0.0], [-1.0, 0.0], [1.0, 0.0]], [[0.0, 0.0], [0.0, -1.0], [0.0, 1.0]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_nu_m(self):
        test = self.phase.nu_m()
        answer =[[[-1.0, 0.0], [1.0, 0.0], [0.0, 0.0]], [[0.0, -1.0], [0.0, 1.0], [0.0, 0.0]], [[0.0, 0.0], [-1.0, 0.0], [1.0, 0.0]], [[0.0, 0.0], [0.0, -1.0], [0.0, 1.0]]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_report(self):
        test = self.phase.report()
        answer = None
        assert(test == answer)

    def test_rho(self):
        test = self.phase.rho(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[34.73259737168928, 36.772999348357004, 37.711839730689796]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_s(self):
        test = self.phase.s(1700.0, 100000.0, [[0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915], [0.8613775369639085, 0.1386224630360915]])
        answer =[2.5000096036486443, 2.4616263822481206, 2.419453617739961]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

    def test_set_parameter(self):
        test = self.phase.set_parameter('R', 8.31442)
        answer = None
        assert(test == answer)

    def test_zero_C(self):
        test = self.phase.zero_C()
        answer =[[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]
        assert(allclose_float_list(test,answer,rtol=1e-05,atol=1e-08))

