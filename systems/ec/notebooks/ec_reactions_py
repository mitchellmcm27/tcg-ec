import os,sys
import pandas as pd
import numpy as np
import sympy as sym
import time
import re
import types
import ast
import sys
sym.init_printing()
sys.path.append(os.path.join(os.path.pardir, 'python'))

dbfile = os.path.abspath(os.path.join(os.path.pardir, 'database', 'tcg_slb_database.tar.gz'))
dbpath = "file://{}".format(dbfile)

import sys, os
import numpy as np

sys.path.append(os.path.join(os.path.pardir, 'python'))
from tcg_slb.phasediagram.scipy import ScipyPDReactiveODE
from tcg_slb.phasediagram.base import PDReactiveGrid, PDReactiveGridDiagnostics
from tcg_slb.base import *

reference= 'ec_reactions_py' 

pv = repr(sys.version_info.major)+'.'+repr(sys.version_info.minor)
sys.path.append(os.path.join(os.path.pardir, 'database', 'install', 'ec4_slb_rx', 'lib', 'python'+pv, 'site-packages/')) # the final slash is necessary!
import py_ec4_slb_rx as tcgdb4
rxn4 = tcgdb4.ec4_slb_rx()

    #             cpx    opx   gt    fld   qtz     ky
mi0 = np.asarray([0.2, 0.15, 0.15, 0.40, 0.02, 0.08]) # initial phase comps
Cik0 = np.asarray([
    0.25, 0.0, 0.0, 0.0, 0.75, # di, hed, clinoenstatite, Ca, jd
    0.5, 0.5, 0.0, 0.0,        # en, fsl, Mg, OrthoDi
    0.4, 0.3, 0.3, 0.0, 0.0,   # py, al, gs, Mg, Na
    0.25, 0.75,                # An, Ab
    1.,                        # qtz
    1.,                        # ky
 ])

import pickle
from pathlib import Path

get_pickle_path = lambda rxnObj : Path('output', rxnObj.name() + '.pickle')

def load_grid(reactionObject):
    filename = get_pickle_path(reactionObject)
    with open(filename, 'rb') as pfile:
        bdfgrid = pickle.load(pfile)
    return bdfgrid

def save_grid(bdfgrid, reactionObject):
    filename = get_pickle_path(reactionObject)
    filename.parent.mkdir(exist_ok=True, parents=True)
    with open(filename, 'wb+') as pfile:
        pickle.dump(bdfgrid, pfile)

def solve_reaction_grid(reactionObject, p_range, T_range, filename=None, reload=False, save=False, odeClass=ScipyPDReactiveODE, Cik0=Cik0, mi0=mi0):
    if reload:
        return load_grid(reactionObject)

    i0 = 2 # doesn't matter as long as you pass cik0
    end = 1e5 # end time

    bdfgrid = PDReactiveGrid()

    bdfgrid.solve(reactionObject, odeClass, i0, ['p', 'T'], p_range, T_range, end, Cik0=Cik0, mi0=mi0)

    if save:
        save_grid(bdfgrid, reactionObject)

    return bdfgrid

def plot_grid(bdfgrid, p_range=np.linspace(0.5,2.5,10), T_range=np.linspace(500,1000,10), plot_phases=True):
    import matplotlib.pyplot as plt

    def decorate(pdrgd):
        def new_setup_axes(self,axi):
            axi.axis('off')
            ax = axi.inset_axes([-0.001,-0.005,0.998,0.993])
            ax.patch.set_alpha(0.0)
            #ax.set_xlim([min(p_range), max(p_range)])
            ax.set_xlabel("Pressure (GPa)")

            #ax.set_ylim([min(T_range), max(T_range)])
            ax.set_ylabel("Temperature (K)")

            return ax
        
        #replace the display with newdisplay
        pdrgd.setup_axes = new_setup_axes
        
        #return the modified student 
        return pdrgd

    bdfdiag = decorate(PDReactiveGridDiagnostics)(rxn,bdfgrid) 
    s=bdfdiag.plot_rho()
    s.set_clim([25, 35])
    s.set_cmap('rainbow')

    if plot_phases:
        bdfdiag.plot_phases()


p_range = np.linspace(0.5, 2.5, 5)
T_range = np.linspace(500.0, 1200.0, 5)

grid4 = solve_reaction_grid(rxn4, p_range, T_range, reload=False, save=True)
# plot_grid(grid4, p_range, T_range)





