#!/usr/bin/env python3

import os,sys
import pandas as pd
import ast
import numpy as np
import sympy as sym
from collections import OrderedDict
from thermocodegen.coder import coder

dbfile = os.path.join(os.path.pardir, 'database', 'tcg_slb_database.tar.gz')
dbpath = "file://{}".format(dbfile)
print(dbpath)

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir, 'python'))
from tcg_slb.reactions import SLBReactions

reference = "generate_reactions"

os.chdir(os.path.abspath(os.path.dirname(__file__)))

def generate_reactions(outdir):

    phases = ['Clinopyroxene', 'Orthopyroxene', 'Garnet', 'Feldspar', 'Quartz']
    reactions = [
        (
            [['Feldspar', 'Albite']],
            [['Clinopyroxene', 'Jadeite'], ['Quartz', 'Quartz']],
        )
    ]
    generate_reaction(outdir, 'ec1', phases, reactions)

    phases = ['Clinopyroxene', 'Orthopyroxene', 'Garnet', 'Feldspar', 'Quartz']
    reactions = [
        (
            [['Feldspar', 'Albite']],
            [['Clinopyroxene', 'Jadeite'], ['Quartz', 'Quartz']],
        ),(
            [['Feldspar', 'Anorthite'], ['Orthopyroxene', 'Enstatite']],
            [['Clinopyroxene', 'Diopside'], ['Garnet', 'Pyrope'], ['Quartz', 'Quartz']]),
    ]

    generate_reaction(outdir, 'ec2', phases, reactions)

    phases = ['Clinopyroxene', 'Orthopyroxene', 'Garnet', 'Feldspar', 'Quartz']
    reactions = [
        (
            [['Feldspar', 'Albite']],
            [['Clinopyroxene', 'Jadeite'], ['Quartz', 'Quartz']],
        ),
        (
            [['Feldspar', 'Anorthite'], ['Orthopyroxene', 'Enstatite']],
            [['Clinopyroxene', 'Diopside'], ['Garnet', 'Pyrope'], ['Quartz', 'Quartz']],
        ),
        ( # Mg-rich: grossular + 2 pyrope + 3 quartz = 3 enstatite + 3 anorthite 
            [['Garnet', 'Grossular'], ['Garnet', 'Pyrope'], ['Quartz', 'Quartz']],
            [['Orthopyroxene', 'Enstatite'], ['Feldspar','Anorthite']],
        ),
        ( # Fe-rich: grossular + 2 almandine + 3 quartz = 3 ferrosilite + 3 anorthite.
            [['Garnet', 'Grossular'], ['Garnet', 'Almandine'], ['Quartz', 'Quartz']],
            [['Orthopyroxene','Ferrosilite'], ['Feldspar','Anorthite']],
        )]
    generate_reaction(outdir, 'ec3', phases, reactions)

def generate_reaction(outdir, name, phases, reactions):
    try:
        os.mkdir(outdir)
    except FileExistsError:
        pass
    name = name+'_slb_rx'
    phases = [ph+"_slb_ph" for ph in phases]
    slbrx = SLBReactions(name, len(reactions), phases, dbpath, reference)
    for reaction in reactions:
        reactants = [[[ph+"_slb_ph", em+"_slb_em"] for ph, em in reaction[i]] for i in range(2)]
        slbrx.add_reaction(*reactants)
    slbrx.tofile(outdir)

if __name__ == "__main__":
    import argparse
    import os

    parser = argparse.ArgumentParser( \
                           description="""Generate rxmls for SLB thermodynamic database.""")
    parser.add_argument('-o', '--outdir', action='store', metavar='outdir', 
                        default=os.path.join(os.path.pardir, 'database', 'reactions'), type=str, required=False,
                        help='Output directory for rxml files (defaults to ../database/reactions relative to script).')
    args = parser.parse_args()

    generate_reactions(args.outdir)

