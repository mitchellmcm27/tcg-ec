#!/usr/bin/env python3

import os,sys
import pandas as pd
import ast
import numpy as np
import sympy as sym
from collections import OrderedDict
from thermocodegen.coder import coder

dbfile = os.path.join(os.path.pardir, 'database', 'tcg_slb_database.tar.gz')
dbpath = "file://{}".format(dbfile)
print(dbpath)

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir, 'python'))
from tcg_slb.reactions import SLBReactions

reference = "generate_reactions"

os.chdir(os.path.abspath(os.path.dirname(__file__)))

def generate_reactions(outdir):
    phases = [
        'Quartz', #Quartz
        'Feldspar', # Anorthite, Albite
        'Garnet', # Pyrope, Almandine, Grossular, MgMajorite, NaMajorite
        'Clinopyroxene', # Diopside, Hedenbergite, Clinoenstatite, CaTschermaks, Jadeite
        'Orthopyroxene', # Enstatite, Ferrosilite, MgTschermaks, OrthoDiopside
        'Kyanite', # Kyanite
        'CaPerovskite', # CaPerovskite
    ] # water?

    reactions = []

    reactions.append((
        [['NaMajorite', 'NaMajorite'], ['Orthopyroxene', 'OrthoDiopside']],
        [['Jadeite', 'Jadeite'], ['Grossular', 'Grossular'], ['Quartz', 'Quartz']]
    ))
    reactions.append((
        [['NaMajorite', 'NaMajorite'], ['Orthopyroxene', 'OrthoDiopside']],
        [['Jadeite', 'Jadeite'], ['Albite','Albite'],]
    ))
    reactions.append((
        [['Jadeite', 'Jadeite'], ['Quartz', 'Quartz']],
        [['Albite', 'Albite']]
    ))

    generate_reaction(outdir, 'eclogite', phases, reactions)

    # repeat for more classes of reactions...

def generate_reaction(outdir, name, phases, reactions):
    try:
        os.mkdir(outdir)
    except FileExistsError:
        pass
    name = name+'_slb_rx'
    phases = [ph+"_slb_ph" for ph in phases]
    slbrx = SLBReactions(name, len(reactions), phases, dbpath, reference)
    for reaction in reactions:
        reactants = [[[ph+"_slb_ph", em+"_slb_em"] for ph, em in reaction[i]] for i in range(2)]
        slbrx.add_reaction(*reactants)
    slbrx.tofile(outdir)

if __name__ == "__main__":
    import argparse
    import os

    parser = argparse.ArgumentParser( \
                           description="""Generate rxmls for SLB thermodynamic database.""")
    parser.add_argument('-o', '--outdir', action='store', metavar='outdir', 
                        default=os.path.join(os.path.pardir, 'database', 'reactions'), type=str, required=False,
                        help='Output directory for rxml files (defaults to ../database/reactions relative to script).')
    args = parser.parse_args()

    generate_reactions(args.outdir)

