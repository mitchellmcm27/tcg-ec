#!/usr/bin/env python3

import os, sys
import pandas as pd
import ast
import numpy as np
import sympy as sym
from collections import OrderedDict
from thermocodegen.coder import coder

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir, 'python'))
from tcg_slb.reactions import SLBReactions

reference = "generate_reactions"

os.chdir(os.path.abspath(os.path.dirname(__file__)))

def generate_reactions(outdir):

    phases = ['Clinopyroxene', 'Orthopyroxene', 'Quartz', 'Feldspar', 'Garnet','Kyanite']

    # what about the following SLB phases:
        # spinel
        # coesite
        # stishovite
        # wuestite--periclase SS (magnesiowuestite)? (FeO-MgO)

    # it would also be easy(?) to add pure-endmember phases from the HGP database

    an = ['Feldspar', 'Anorthite']
    ab = ['Feldspar','Albite']

    fs = ['Orthopyroxene', 'Ferrosilite']
    oEn = ['Orthopyroxene', 'Enstatite']
    mgts = ['Orthopyroxene','MgTschermaks']
    oDi = ['Orthopyroxene', 'OrthoDiopside']

    hed = ['Clinopyroxene', 'Hedenbergite']
    di = ['Clinopyroxene', 'Diopside']
    jd = ['Clinopyroxene','Jadeite']
    cats = ['Clinopyroxene','CaTschermaks']
    cEn = ['Clinopyroxene','Clinoenstatite']

    alm = ['Garnet', 'Almandine']
    pyp = ['Garnet', 'Pyrope']
    gs = ['Garnet', 'Grossular']
    mgmaj = ['Garnet','MgMajorite']
    namaj = ['Garnet','NaMajorite']

    qz = ['Quartz', 'Quartz']

    ky = ['Kyanite', 'Kyanite']

    reactions = [
        # plag +- opx <=> grt
        ([an,oEn],[di,mgts,qz]),
        ([an],[cats,qz]),

        # plag + opx <=> grt + cpx + qz
        # ([oEn, fs, an],[pyp, alm, di, hed, qz]),
         ([oEn, an],[pyp, di, qz]),
         ([fs, an],[alm, hed, qz]),

        # ([oEn, fs, an],[pyp, alm, gs, qz]),
        ([oEn, an],[pyp, gs, qz]),
        ([fs, an],[alm, gs, qz]),

        # Al-opx/cpx + Al-cpx/opx <=> grt
        ([oEn, mgts], [pyp]),
        ([cats, oEn], [gs, pyp]),

        # albite <=> jadeite + quartz
        ([ab], [jd, qz])
    ]

    generate_reaction(outdir, 'ec_simple_slb', phases, reactions)

def generate_reaction(outdir, name, phases, reactions):

    dbfile = os.path.join(os.path.pardir, 'database', 'tcg_slb_database.tar.gz')
    dbpath = "file://{}".format(dbfile)

    try:
        os.mkdir(outdir)
    except FileExistsError:
        pass

    name = name+"_slb_rx"
    phases = [ph+"_slb_ph" for ph in phases]
    
    rxn = SLBReactions(name, len(reactions), phases, dbpath, reference)
    for reaction in reactions:
        reactants = [[[ph+"_slb_ph", em+"_slb_em"] for ph, em in reaction[i]] for i in range(2)]
        rxn.add_reaction(*reactants)
    rxn.tofile(outdir)

if __name__ == "__main__":
    import argparse
    import os

    parser = argparse.ArgumentParser( \
                           description="""Generate rxmls for a given thermodynamic database.""")
    parser.add_argument('-o', '--outdir', action='store', metavar='outdir', 
                        default=os.path.join(os.path.pardir, 'database', 'reactions'), type=str, required=False,
                        help='Output directory for rxml files (defaults to ../database/reactions relative to script).')

    args = parser.parse_args()
    print(args.outdir)
    generate_reactions(args.outdir)

