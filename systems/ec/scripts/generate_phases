#!/usr/bin/env python3

import os,sys
import pandas as pd
import ast
from thermocodegen.coder import coder

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir, 'python'))
from tcg_slb.phase import SLBPhase

reference= 'generate_phases' 

def generate_phases(outdir):
  def literal_return(val):
      try:
          return ast.literal_eval(val)
      except (ValueError, SyntaxError) as e:
          return None
  converter = dict([(h,literal_return) for h in ['endmember_names','conversion_strs','X','d','W','sites','TC0','VD','SD']])
  df = pd.read_csv(os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'data', 'slb_phases.csv'),skipinitialspace=True,converters=converter)

  try:
      os.mkdir(outdir)
  except FileExistsError:
      pass

  for i, row in df.iterrows():
      values_dict = row.to_dict()
      name = values_dict.pop('name').replace('-','_')+'_slb_ph'
      abbrev = values_dict.pop('abbrev')
      endmember_names = values_dict.pop('endmember_names')
      endmember_names = [em+'_slb_em' for em in endmember_names]
      phase = SLBPhase(name, abbrev, reference, endmember_names, **values_dict)
      print(phase.tofile(outdir))

if __name__ == "__main__":
    import argparse
    import os

    parser = argparse.ArgumentParser( \
                           description="""Generate phmls for SLB thermodynamic database.""")
    parser.add_argument('-o', '--outdir', action='store', metavar='outdir', 
                        default=os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'phases'), type=str, required=False,
                        help='Output directory for phml files (defaults to ../database/phases relative to script).')
    args = parser.parse_args()

    generate_phases(args.outdir)


