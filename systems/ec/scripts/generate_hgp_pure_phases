#!/usr/bin/env python3

import os,sys
import pandas as pd
from thermocodegen.coder import coder
import json

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir, 'python'))
from tcg_slb.burnman_endmember import BurnmanEndmember
from tcg_slb.berman_phase import BermanPhase

def generate_hgp_pure_phases(outdir):
  reference= 'generate_hgp_pure_phases' 
  with open(os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'data', 'HGP_2018_ds633.json'),'r') as datfile:
    df1 = json.load(datfile)
  
  for key in df1:
    params = {}
    obj = df1[key]
    name = obj['name']
    if name[-1] == 'L':
      continue

    formula = ''
    formula_obj = obj['formula']
    for key in formula_obj:
      formula = formula + '{}[{}]'.format(key, key)

    full_name = '{}_hgp_ph'.format(name)
    endmember_names = ['{}_hgp_em'.format(name)]
    values_dict = {}
    values_dict['formula_str']=formula
    values_dict['conversion_strs']=['[0]=[{}]/{}'.format(list(formula_obj.keys())[0], formula_obj[list(formula_obj.keys())[0]])]
    
    phase = BermanPhase(full_name, name, reference, endmember_names, **values_dict)
    print(phase.tofile(outdir))

if __name__ == "__main__":
    import argparse
    import os

    parser = argparse.ArgumentParser( \
                           description="""Generate phmls for the HGP thermodynamic database.""")
    parser.add_argument('-o', '--outdir', action='store', metavar='outdir', 
                        default=os.path.join(os.path.dirname(__file__), os.path.pardir, 'database','phases'), type=str, required=False,
                        help='Output directory for phml files (defaults to ../database/phases relative to script).')
    args = parser.parse_args()

    generate_hgp_pure_phases(args.outdir)


