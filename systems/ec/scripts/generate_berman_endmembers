#!/usr/bin/env python3

import os,sys
import pandas as pd
from thermocodegen.coder import coder

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir, 'python'))
from tcg_slb.endmember import BermanEndmember, BermanPolyEndmember

def generate_berman_endmembers(outdir):
  reference= 'generate_berman_endmembers' 
  df1 = pd.read_json(os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'data', 'berman_1988.json'))
  cols_ss = ['Phase', 'Formula', 'sAbbrev', 'lAbbrev', 'H_TrPr', 'S_TrPr', 'V_TrPr','k0', 'k1', 'k2', 'k3', 'v1', 'v2', 'v3', 'v4']
  df1 = df1[cols_ss]
  df1 = df1.rename(index=str,columns={'Phase':'name', 'Formula':'formula'})
  df2 = pd.read_csv(os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'data', 'berman_thermoengine_extended.csv'))

  df = pd.concat([df1, df2],ignore_index=True)

  try:
      os.mkdir(outdir)
  except FileExistsError:
      pass

  formula = 'SI(1)O(2)'
  df_si = df[df['formula']==formula]
  polymorphs = ['A-QUARTZ', 'B-QUARTZ']
  name = "Quartz_ber_em"
  df_poly = df_si.set_index('name').filter(items=polymorphs,axis=0)
  em = BermanPolyEndmember(name,formula,reference,polymorphs,df_poly)
  print(em.tofile(outdir))

  formula = 'SI(1)O(2)'
  df_si = df[df['formula']==formula]
  polymorphs = ['B-QUARTZ', 'BETA_CRISTOBALITE']
  name = "Silica_Polymorph_ber_em"
  df_poly = df_si.set_index('name').filter(items=polymorphs,axis=0)
  em = BermanPolyEndmember(name,formula,reference,polymorphs,df_poly)
  print(em.tofile(outdir))
  
  for i, row in df.iterrows():
      values_dict = row.to_dict()
      # clean up names to make them coder compliant
      name = values_dict.pop('name').lower().title().replace('-','_')+'_ber_em'
      formula = values_dict.pop('formula')
      values_dict.pop('sAbbrev')
      values_dict.pop('lAbbrev')
      em = BermanEndmember(name,formula,reference,**values_dict)
      print(em.tofile(outdir))

if __name__ == "__main__":
    import argparse
    import os

    parser = argparse.ArgumentParser( \
                           description="""Generate emmls for the Berman thermodynamic database.""")
    parser.add_argument('-o', '--outdir', action='store', metavar='outdir', 
                        default=os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'endmembers_berman'), type=str, required=False,
                        help='Output directory for emml files (defaults to ../database/endmembers_berman relative to script).')
    args = parser.parse_args()

    generate_berman_endmembers(args.outdir)


