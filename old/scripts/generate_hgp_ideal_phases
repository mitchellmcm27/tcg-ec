#!/usr/bin/env python3

import os,sys
import pandas as pd
import ast
from thermocodegen.coder import coder
import json

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir, 'python'))
from tcg_slb.berman_phase import BermanPhase
from tcg_slb.phase import SLBPhase

reference= 'generate_hgp_ideal_phases' 

def generate_pure_phases(outdir):

  try:
    os.mkdir(outdir)
  except FileExistsError:
    pass

  with open(os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'data', 'HGP_2018_ds633.json'),'r') as datfile:
    df1 = json.load(datfile)
  
  for key in df1:
    obj = df1[key]
    name = obj['name']
    if name[-1] == 'L':
      continue

    formula = ''
    formula_obj = obj['formula']
    try:
      for key in formula_obj:
        amount = formula_obj[key]
        assert(float(amount).is_integer())
        formula = formula + '{}[{}]'.format(key, key)
    except:
      print("Skipping {} (non-integer amounts in formula)".format(name))
      continue

    full_name = '{}_hgp_ph'.format(name)
    endmember_names = ['{}_hgp_em'.format(name)]
    values_dict = {}
    values_dict['formula_str']=formula
    values_dict['conversion_strs']=['[0]=[{}]/{}'.format(list(formula_obj.keys())[0], formula_obj[list(formula_obj.keys())[0]])]
    
    phase = SLBPhase(full_name, name, reference, endmember_names, **values_dict)
    print(phase.tofile(outdir))

def generate_ideal_soln_phases(outdir):
  def literal_return(val):
      try:
          return ast.literal_eval(val)
      except (ValueError, SyntaxError) as e:
          return None

  converter = dict([(h,literal_return) for h in ['endmember_names','conversion_strs','X','d','W','sites','TC0','VD','SD']])
  df = pd.read_csv(os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'data', 'hgp_ideal_phases.csv'),skipinitialspace=True,converters=converter)

  try:
      os.mkdir(outdir)
  except FileExistsError:
      pass

  for i, row in df.iterrows():
      values_dict = row.to_dict()
      name = values_dict.pop('name').replace('-','_')+'_hgp_ph'
      print(name)
      abbrev = values_dict.pop('abbrev')
      endmember_names = values_dict.pop('endmember_names')
      endmember_names = [em+'_hgp_em' for em in endmember_names]
      phase = SLBPhase(name, abbrev, reference, endmember_names, **values_dict)
      print(phase.tofile(outdir))

if __name__ == "__main__":
    import argparse
    import os

    parser = argparse.ArgumentParser( \
                           description="""Generate ideal-solution phase phmls for the HGP thermodynamic database.""")
    parser.add_argument('-o', '--outdir', action='store', metavar='outdir', 
                        default=os.path.join(os.path.dirname(__file__), os.path.pardir, 'database','phases'), type=str, required=False,
                        help='Output directory for phml files (defaults to ../database/phases relative to script).')
    args = parser.parse_args()

   # generate_pure_phases(args.outdir)
    generate_ideal_soln_phases(args.outdir)