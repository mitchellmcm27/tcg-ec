#!/usr/bin/env python3

import os,sys
import pandas as pd
from thermocodegen.coder import coder
import json

sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir, 'python'))
from tcg_slb.burnman_endmember import BurnmanEndmember

def generate_hgp_endmembers(outdir):
  reference= 'generate_hgp_endmembers' 
  with open(os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'data', 'HGP_2018_ds633.json'),'r') as datfile:
    df1 = json.load(datfile)
  
  for key in df1:
    params = {}
    obj = df1[key]
    name = obj['name']
    if name[-1] == 'L':
      continue
    formula = ''
    formula_obj = obj['formula']

    try:
      for el in formula_obj:
        amount = formula_obj[el]
        assert(float(amount).is_integer())
        formula += '{}({:.0f})'.format(el, formula_obj[el])
    except:
      print("Skipping endmember {} (encountered fractions in formula)".format(name))
      continue
    
    params = obj
    params.pop('name')
    params.pop('formula')
    params.pop('equation_of_state')
    params.pop('G_0')
    params.pop('Gprime_0')

    name = '{}_hgp_em'.format(name)

    for ci, c in enumerate(obj['Cp']):
      cKey = 'Cp_{}'.format(ci)
      params[cKey] = c

    params.pop('Cp')

    params['P_0'] /= 1.e5 # Pa -> bar
    params['V_0'] *= 1.e5 # J/Pa-m -> J/bar-m
    params['K_0'] /= 1.e5 # Pa -> bar
    
    em = BurnmanEndmember(name, formula, reference, **params)
    print(em.tofile(outdir))

    # generate orthodiopside (odi)
    if(name=="di_hgp_em"):
      print("Generate orthodiopside endmember")
      name = "odi_hgp_em"
      odi = BurnmanEndmember(name,formula,reference,**params)
      odi.G = odi.gibbs_free_energy() - 0.1 + 0.000211*odi.T + 0.005*odi.P*1000. # kbar
      print(odi.tofile(outdir))



if __name__ == "__main__":
    import argparse
    import os

    parser = argparse.ArgumentParser( \
                           description="""Generate emmls for the HGP_2018_ds633 (H&P) thermodynamic database.""")
    parser.add_argument('-o', '--outdir', action='store', metavar='outdir', 
                        default=os.path.join(os.path.dirname(__file__), os.path.pardir, 'database', 'endmembers'), type=str, required=False,
                        help='Output directory for emml files (defaults to ../database/endmembers_berman relative to script).')
    args = parser.parse_args()

    generate_hgp_endmembers(args.outdir)


