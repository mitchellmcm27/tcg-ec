#!/usr/bin/env python3

import os
from pathlib import Path
import re
import csv

lookup = {
'an': ['Anorthite', 'Ca(1)Al(2)Si(2)O(8)'],
'ab':['Albite', 'Na(1)Al(1)Si(3)O(8)'],
'sp':['MgSpinel', 'Mg(4)Al(8)O(16)'],
'herc':['Hercynite', 'Fe(4)Al(8)O(16)'],
'fo':['Forsterite', 'Mg(2)Si(1)O(4)'],
'fa':['Fayalite', 'Fe(2)Si(1)O(4)'],
'wad':['MgWadsleyite', 'Mg(2)Si(1)O(4)'],
'fwad':['FeWadsleyite', 'Fe(2)Si(1)O(4)'],
'ring':['MgRingwoodite', 'Mg(2)Si(1)O(4)'],
'fring':['FeRingwoodite', 'Fe(2)Si(1)O(4)'],
'en':['Enstatite', 'Mg(2)Si(2)O(6)'],
'fs':['Ferrosilite', 'Fe(2)Si(2)O(6)'],
'ts':['MgTschermaks', 'Mg(1)Al(2)Si(1)O(6)'],
'odi':['OrthoDiopside', 'Ca(1)Mg(1)Si(2)O(6)'],
'di':['Diopside', 'Ca(1)Mg(1)Si(2)O(6)'],
'hed':['Hedenbergite', 'Ca(1)Fe(1)Si(2)O(6)'],
'cen':['Clinoenstatite', 'Mg(2)Si(2)O(6)'],
'cts':['CaTschermaks', 'Ca(1)Al(2)Si(1)O(6)'],
'jd':['Jadeite', 'Na(1)Al(1)Si(2)O(6)'],
'c2/c':['HPClinoenstatite','Mg(2)Si(2)O(6)'],
'fc2/c':['HPClinoferrosilite','Fe(2)Si(2)O(6)'],
'ca-pv':['CaPerovskite', 'Ca(1)Si(1)O(3)'],
'aki':['MgAkimotoite', 'Mg(1)Si(1)O(3)'],
'faki':['FeAkimotoite', 'Fe(1)Si(1)O(3)'],
'aaki':['AlAkimotoite', 'Al(2)O(3)'],
'py':['Pyrope', 'Mg(3)Al(2)Si(3)O(12)'],
'alm':['Almandine', 'Fe(3)Al(2)Si(3)O(12)'],
'gr':['Grossular', 'Ca(3)Al(2)Si(3)O(12)'],
'maj':['MgMajorite', 'Mg(4)Si(4)O(12)'],
'namj':['NaMajorite', 'Na(2)Al(2)Si(4)O(12)'],
'qtz':['Quartz','Si(1)O(2)'],
'coes':['Coesite','Si(1)O(2)'],
'coe':['Coesite','Si(1)O(2)'],
'st':['Stishovite', 'Si(1)O(2)'],
'seif':['Seifertite', 'Si(1)O(2)'],
'perov':['MgPerovskite', 'Mg(1)Si(1)O(3)'],
'fperov':['FePerovskite', 'Fe(1)Si(1)O(3)'],
'aperov':['AlPerovskite', 'Al(2)O(3)'],
'ppv':['MgPostPerovskite','Mg(1)Si(1)O(3)'],
'fppv':['FePostPerovskite','Fe(1)Si(1)O(3)'],
'appv':['AlPostPerovskite','Al(2)O(3)'],
'per':['Periclase', 'Mg(1)O(1)'],
'wus':['Wuestite', 'Fe(1)O(1)'],
'mfer':['MgCaFerrite', 'Mg(1)Al(2)O(4)'],
'ffer':['FeCaFerrite', 'Fe(1)Al(2)O(4)'],
'nfer':['NaCaFerrite', 'Na(1)Al(1)Si(1)O(4)'],
'ky':['Kyanite', 'Al(2)Si(1)O(5)'],
'neph':['Nepheline', 'Na(1)Al(1)Si(1)O(4)'],
'anao':['AlphaNaO2', 'Na(2)Al(2)O(4)'],
'cor':['Corundum', 'Al(2)O(3)'],
'crst':['Cristobalite','Si(1)O(2)'],
'fnal':['FeNAL', 'Na(1)Fe(2)Al(5)Si(1)O(12)'],
'mnal':['MgNAL', 'Na(1)Mg(2)Al(5)Si(1)O(12)'],
'nnal':['NaNAL', 'Na(3)Al(3)Si(3)O(12)'],
'cfs': ['ClinoFerrosilite','Fe(2)Fe(2)Si(4)O(12)'],
'jmaj': ['JdMajorite','Na(2)Al(2)Si(4)O(12)'],
'q': ['Quartz','Si(1)O(2)']
}

def parse_file(file_path):

    result = []

    with open(Path(file_path), 'r') as file:

        contents = file.read()

        trimmed = '\n'.join([re.split(r'\|',line,1,flags=re.MULTILINE)[0].strip() for line in contents.split("\n")]).strip()
        sections = re.split(r'^end', trimmed, flags=re.MULTILINE)
        sections = [sec for sec in sections if sec]
        fieldnames = []
        for section in sections[3:]:
            '''
            aperov   EoS = 6 | Al_1Al_1O_3            Al-Perovskite                           
            AL2O3(1)
            G0 = -1517728.63 S0 = -5 V0 = -2.4944
            c1 = 2424000 c2 = 4.1 c3 = 858.26509 c4 = 1.54222 c5 = 0.84088 c6 = 2.27510
            m0 = 1691996.2 m1 = 1.55703
            end
            '''
            stripped = section.strip()

            # grab the first 2 lines, which don't follow the normal pattern
            line0, line1 = stripped.split("\n")[0:2]

            line0_words = re.split(r'\s+',line0)
            abbrev=line0_words[0]
            eos=line0_words[3]

            formula= lookup[abbrev][1]
            name = lookup[abbrev][0]           
       
            # grab the remaining lines, which are more regular
            lines = stripped.split("\n")[2:]
            # join the lines into a single line separated by white space
            data = " ".join(lines[0:])
       
            vals = re.split(r'\s+',data)
            # filter out "=" symbols
            vals = [s for s in vals if s!='=']

            # assume what remains is of the form [name1,val1,name2,val2,...]
            varnames = [s for i,s in enumerate(vals) if not i%2]
            varvals = [s for i,s in enumerate(vals) if i%2]

            # make a values dictionary, converting to floats
            d1 = {k:float(v) for k, v in zip(varnames,varvals)}
            valsdict = {}
            valsdict['name']    = name
            valsdict['formula'] = formula
            valsdict['a0']     =  d1.get('G0',None)
            valsdict['n']      =  d1.get('S0',None)
            valsdict['v0']     =  d1.get('V0',None)
            valsdict['k00']    =  d1.get('c1',None)
            valsdict['k0p']    =  d1.get('c2',None)
            valsdict['theta0'] =  d1.get('c3',None)
            valsdict['gamma0'] =  d1.get('c4',None)
            valsdict['q']      =  d1.get('c5',None)
            valsdict['refS']   =  0.
            valsdict['T_r']    =  300.
            valsdict['V_r']    =  d1.get('V0',None)
            valsdict['TC0']    =  d1.get('t1',None)
            valsdict['VD']     =  d1.get('t3',None)
            valsdict['SD']     =  d1.get('t2',None)

            if(valsdict.get('n', False)):
                valsdict['n'] *= -1
            if(valsdict.get('V_r', False)):
                valsdict['V_r'] *= -1
            if(valsdict.get('v0', False)):
                valsdict['v0'] *= -1

            valsdict['abbrev'] = abbrev
            valsdict['eos'] = eos

            result.append(valsdict)
    

    output = Path(re.sub(r'\.dat$','.csv',file_path))

    fieldnames = ['name','formula','a0','n','v0','k00','k0p','theta0' ,'gamma0','q'  ,'refS' ,'T_r'  ,'V_r','TC0','VD','SD','abbrev','eos']
    with open(output, 'w') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(result)

if __name__ == "__main__":
    import argparse
    import os

    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input_file', action='store', metavar='input_file', 
                        type=str, required=True,
                        help='Path to stx[11/21]ver.dat')
    
    args = parser.parse_args()

    parse_file(args.input_file)